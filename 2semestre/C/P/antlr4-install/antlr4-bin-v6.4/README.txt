In this zip file you can find a group of useful scripts to increase the productivity of ANTLR4 programming.

INSTALL.txt:
- Instructions for antlr4 installation (Java).

antlr4 (Java, C++, Python3):
- ANTLR4 grammar compiler.

antlr4-visitor (Java, C++, Python3):
- Creates a new visitor class.

antlr4-listener (Java, C++, Python3):
- Creates a new listener class.

antlr4-main (Java, C++, Python3):
- Creates a target language Main file for a grammar.
- This command has several options that allows the creation of an interactive interpreter
  (see -i and -is options) and/or the inclusion of listeners and/or visitors
  (execute antlr4-main with -h argument to see all the available options).
- Current version checks the existence of the grammar, rule, and listener/visitor files
  (option -f prevents such verifications).
- In Java target, tHis script creates proper code for old antlr4 versions (<= 4.6) and for new versions (>= 4.7).

antlr4-build (Java, C++, Python3):
- Script that applies antlr4 to all existing *.g4 files in current directory or in
  subdirectories and, if successful, compiles the generated target language code.
- It can be used to process only one grammar (run it with option -h for more information)
- For Java target, it assumes that grammars in subdirectories belong to the corresponding package.

antlr4-run (Java, C++, Python3):
- Runs the compiler present in current directory or in a subdirectory (fails if none exists,
  or if there are more than one).
- Accepts program files as arguments (uses stdin if no argument is passed).

antlr4-clean (Java, C++, Python3):
- Removes all files that were automatically generated by antlr4 compiler for all grammar files
  in current directory or in subdirectories.
- If applicable, removes also object and executable files (*.class files in Java, *.o and executable files in C++).
- It can be used to process only one grammar (run it with option -h for more information)

antlr4-test (Java):
- Applies antlr4 test tool to a grammar.
- The current version tries to be smart, and accepts its execution without arguments
  (or simply with -tokens, -tree, or -gui argument). It finds the grammar and start rule
  by looking at *.g4 file in current directory and in subdirectories (fails if none exists,
  or if there are more than one).
- The start rule will be the first rule defined in that grammar (comments and preamble actions are ignored
  in the processing).
- In the smart version, you can use -t and -g options as a replacement of -tokens and -gui.
- Please note that the smart version of this command only works if gawk and C compiler is installed in out system
  (C's preprocessor command cpp is used to clean up comments of ANTLR4 grammar file).

antlr4-jar-run (Java):
- Executes a jar file with antlr4 and ST jar files in the CLASSPATH.

antlr4-javac (Java):
- Executes java compiler with antlr4 and ST jar files in the CLASSPATH.

antlr4-java (Java):
- Executes java virtual machine with antlr4 and ST jar files in the CLASSPATH.

st-groupfile2string (Java):
- Converts the contents of a STGroupFile to a STGroupString java String template
  (thus, eliminating the dependency to stg files, by making a "hardwired" version
   of ST templates).

java-clean (Java):
- Recursively removes all java bytecode files (*.class).

view-javadoc (Java):
- Opens the javadoc documentation of a class in a browser.
- Requires that instalation of javadoc documentation in the computer.
- If you install ANTLR4 documentation (antlr4-4.*-javadoc.zip) in /usr/share/doc directory, no change is
  required to make this command work on ANTLR4 documentation (try with: view-javadoc Tool); Otherwise,
  you'll need to edit this scriptand change same variable (see the script's source code).
- Edit this script to take into consideration the location of java library documentation (see variables
  JDKDIR1 and JDKDIR2).

aliases:
- a group of bash aliases to use while developing with ANTLR4.

