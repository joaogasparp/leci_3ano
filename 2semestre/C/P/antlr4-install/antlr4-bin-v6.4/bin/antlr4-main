#!/bin/bash
#
# Miguel Oliveira e Silva (mos@ua.pt), 2017-2021

scriptName="antlr4-main"
target="java"
sourceExt="java"

function help()
{
   echo "Usage: $scriptName [options] [<GrammarName> <mainRule>]"
   echo ""
   echo "   Creates a main class in the target language to parse <GrammarName> starting at rule <mainRule>."
   echo "   Arguments <GrammarName> <mainRule> may be omitted iff there is only one grammar in the directory"
   echo "   (and eventual subdirectories), and the first symbol in the grammar is the <mainRule> symbol."
   echo ""
   echo "   Target language:"
   echo ""
   echo "   options:"
   echo "       -h"
   echo "       -help"
   echo "           help page"
   echo "       -java: java as target language (default)"
   echo "       -cpp: c++ as target language"
   echo "       -python: python3 as target language"
   echo "       -l <ListenerFile>"
   echo "       -listener <ListenerFile>"
   echo "           main created with support for traversing the given listener class"
   echo "           multiple listeners are allowed (the order will be respected)"
   echo "       -v <VisitorFile>"
   echo "       -visitor <VisitorFile>"
   echo "           main created with support for visiting the given visitor class"
   echo "           multiple visitors are allowed (the order will be respected)"
   echo "       -i"
   echo "       -line-interactive"
   echo "           main created for a line interactive interpreter"
   echo "       -is <Separator>"
   echo "       -separator-interactive <Separator>"
   echo "           main created for a text separated interactive parser"
   echo "       -indent <N>"
   echo "           number of indentation spaces (default: 3)"
   echo "       -f"
   echo "       -force"
   echo "           force creation of main file even if grammar, rule, listeners, and visitor don't exist,"
   echo "           or if main file already exists"
   echo ""
   exit 1;
}

#if (( $# == 0 )); then
#fi

grammar=""
grammarfile=""
rule=""
fileName=""
listeners=()
visitors=()
treewalking=()     # listeners and visitor in proper order
treewalkingtype=() # v: visitor, l: listener
delimiter=""
interactiveVar=""
interactiveDelimiter=""
interactiveNext=""
nextExtraText=""
interactive="false"
lineInteractive="false"
separatorInteractive="false"
indentSpaces="3"
forceCreation="false"

version=`antlr4 | head -1 | sed 's/.\+Version //1' | sed 's/^4\.//g' | sed 's/\.[0-9]\+$//g'`

while (( $# > 0 )); do
   arg="$1"
   case "$arg" in
      -h | -help)
         help
         ;;
      -cpp | -c++)
         target="cpp"
         sourceExt="cpp"
         ;;
      -python | -python3)
         target="python"
         sourceExt="py"
         ;;
      -java)
         target="java"
         sourceExt="java"
         ;;
      -v | -visitor)
         shift
         if (( $# == 0 )); then
            echo -e "ERROR: missing visitor file name!"
            exit 2
         fi
         visitorFile=(`echo $1 | sed "s/.$sourceExt\$//1" | sed 's/\.$//g'`)
         treewalking+=($visitorFile)
         visitors+=($visitorFile)
         visitorFile=${visitorFile}.$sourceExt
         treewalkingtype+=("v")
         if [[ $forceCreation == "false" ]]; then
            if ! [ -e $visitorFile ]; then
               echo "ERROR: visitor file $visitorFile not found"
               exit 3
            fi
         fi
         ;;
      -l | -listener)
         shift
         if (( $# == 0 )); then
            echo -e "ERROR: missing listener file name!"
            exit 4
         fi
         listenerFile=(`echo $1 | sed "s/.$sourceExt\$//1" | sed 's/\.$//g'`)
         treewalking+=($listenerFile)
         listeners+=($listenerFile)
         listenerFile=${listenerFile}.$sourceExt
         treewalkingtype+=("l")
         if [[ $forceCreation == "false" ]]; then
            if ! [ -e $listenerFile ]; then
               echo "ERROR: listener file $listenerFile not found"
               exit 5
            fi
         fi
         ;;
      -i | -line-interactive)
         delimiter=""
         interactive="true"
         lineInteractive="true"
         separatorInteractive="false"
         interactiveVar="lineText"
         interactiveDelimiter=""
         interactiveNext="Line"
         nextExtraText=""
         ;;
      -is | -separator-interactive)
         shift
         if (( $# == 0 )); then
            echo -e "ERROR: missing interactive delimiter text!"
            exit 6
         fi
         delimiter=$1
         interactive="true"
         lineInteractive="false"
         separatorInteractive="true"
         interactiveVar="text"
         interactiveDelimiter=".useDelimiter(\"${delimiter}\")"
         interactiveNext=""
         nextExtraText="+\"${delimiter}\""
         ;;
      -indent)
         shift
         if (( $# == 0 )); then
            echo -e "ERROR: missing indentation value!"
            exit 6
         fi
         indentSpaces="$1"
         if ! [[ "$indentSpaces" =~ ^[0-9]+$ ]]; then
            echo "ERROR: invalid indentation number"
            exit 6
         fi
         ;;
      -f | -force)
         forceCreation="true"
         ;;
      -*)
         echo "ERROR: invalid argument!"
         exit 1
         ;;
      *)
         if [[ $grammar == "" ]]; then
            grammar=(`echo $1 | sed 's/.g4$//1' | sed 's/Parser$//1'`)
            grammarfile=${grammar}.g4
            if ! [ -e $grammarfile ]; then
               grammarfile=${grammar}Parser.g4
               if [[ $forceCreation == "false" ]]; then
                  if ! [ -e $grammarfile ]; then
                     echo "ERROR: grammar file of $grammar not found"
                     exit 7
                  fi
               fi
            fi
         elif [[ $rule == "" ]]; then
            rule=$1
            if [[ $forceCreation == "false" ]]; then
               if (! (cat ${grammarfile} | cpp 2>/dev/null | grep -wv '^#' | grep -E -A10 "^[[:space:]]*\<$rule\>" | tr '\n' ' ' | grep -E "[[:space:]]*\<$rule\>[[:space:]]*:" > /dev/null)); then
                  echo "ERROR: rule $rule not found in grammar $grammar"
                  exit 8
               fi
            fi
         else
            echo -e "ERROR: invalid argument \"$1\"!"
            exit 9
         fi
         ;;
   esac
   shift
done

if [[ $grammar == "" ]]; then
   if (command -v cpp >/dev/null 2>&1); then
      count=`find . -name \*.g4 | sed 's/Parser.g4$\|Lexer.g4$\|.g4$//1' | uniq | wc -l`
      if ((count == 0)); then
         echo "ERROR: Grammar file not found! (try option -h)"
         exit 10
      elif ((count > 1)); then
         echo "ERROR: Too many grammar files!"
         find . -name \*.g4 -printf "   %p\n"
         exit 10
      fi
      g4=`find . -name \*.g4 | sed 's/Parser.g4$\|Lexer.g4$\|.g4$//1' | uniq`

      if [ ! -e $g4.g4 ]; then
         g4=${g4}Parser
      fi

      grammar=`cat "$g4"*.g4 | cpp 2>/dev/null | grep -wv ^# | sed 's/{/ { /g' | sed 's/}/ } /g' | tr '\n' ' ' | tr ' ' '\n' | grep -wv parser | grep -wv options | grep -v ^\;$ | grep -v ^$ | gawk 'BEGIN {incode=0;} /{/ {incode++;} /}/ {incode--;}  {if (incode == 0) print $0;}' | grep -v \} | grep -v @.* | head -2 | tail -1 | sed 's/[:;].*$//g' | grep -v ^$ | sed 's/Parser$//'`
         rule=`cat "$g4"*.g4 | cpp 2>/dev/null | grep -wv ^# | sed 's/{/ { /g' | sed 's/}/ } /g' | tr '\n' ' ' | tr ' ' '\n' | grep -wv parser | grep -wv options | grep -v ^\;$ | grep -v ^$ | gawk 'BEGIN {incode=0;} /{/ {incode++;} /}/ {incode--;}  {if (incode == 0) print $0;}' | grep -v \} | grep -v @.* | head -3 | tail -1 | sed 's/[:;].*$//g' | grep -v ^$`

      if [ -e ${grammar}Parser.g4 ]; then
         grammarfile="${grammar}Lexer.g4 ${grammar}Parser.g4"
      else
         grammarfile=${grammar}.g4
      fi

      #echo "Grammar: $grammar"
      #echo "Main rule: $rule"

      if [ -z "$grammar" ]; then
         echo "ERROR: grammar name missing! (try option -h)"
         exit 10
      fi
      if [ -z "$rule" ]; then
         echo "ERROR: first grammar rule missing!"
         exit 11
      fi
   else
      echo -e "ERROR: missing grammar name! (try option -h)"
      exit 10
   fi
fi

if [[ $rule == "" ]]; then
   echo -e "ERROR: missing rule name!"
   exit 11
fi

fileName=${grammar}Main.$sourceExt

if [[ $forceCreation == "true" ]]; then
   if [ -f $fileName ]; then
      rm -fv ${fileName}
   fi
fi

if [ -f $fileName ]; then
   echo "ERROR: file \"$fileName\" already exists!"
   exit 12
fi

echo -e "Creating \"$fileName\" for:"
echo -e "   grammar=\"$grammar\""
echo -e "   grammarfile=\"$grammarfile\""
echo -e "   rule=\"$rule\""
echo -e "   target language: $target"
if (( ${#treewalking[*]} > 0 )); then
   echo -e "   treewalking=\"${treewalking[*]}\""
fi
if (( ${#listeners[*]} > 0 )); then
   echo -e "   listeners=\"${listeners[*]}\""
fi
if (( ${#visitors[*]} > 0 )); then
   echo -e "   visitors=\"${visitors[*]}\""
fi
if [[ $lineInteractive == "true" ]]; then
   echo -e "   line-interactive"
fi
if [[ $separatorInteractive == "true" ]]; then
   echo -e "   separator-interactive (separador=\"$delimiter\")"
fi

case $target in
   java)
      if [[ $interactive == "true" ]]; then
         echo "import java.util.Scanner;" >> $fileName
      else
         echo "import java.io.IOException;" >> $fileName
      fi
      echo "import org.antlr.v4.runtime.*;" >> $fileName
      echo "import org.antlr.v4.runtime.tree.*;" >> $fileName
      echo "" >> $fileName
      echo "public class ${grammar}Main {" >> $fileName
      indentval=${indentSpaces}; indent=$(printf "%${indentval}s")
      echo "${indent}public static void main(String[] args) {" >> $fileName
      indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}try {" >> $fileName
      indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      if [[ $interactive == "true" ]]; then
         echo "${indent}Scanner sc = new Scanner(System.in)${interactiveDelimiter};" >> $fileName
         echo "${indent}String ${interactiveVar} = null;" >> $fileName
         echo "${indent}int num${interactiveNext} = 1;" >> $fileName
         echo "${indent}if (sc.hasNext${interactiveNext}())" >> $fileName
         echo "${indent}   ${interactiveVar} = sc.next${interactiveNext}()${nextExtraText};" >> $fileName
         echo "${indent}${grammar}Parser parser = new ${grammar}Parser(null);" >> $fileName
         echo "${indent}// replace error listener:" >> $fileName
         echo "${indent}//parser.removeErrorListeners(); // remove ConsoleErrorListener" >> $fileName
         echo "${indent}//parser.addErrorListener(new ErrorHandlingListener());" >> $fileName
         if (( ${#treewalking[*]} > 0 )); then
            if (( ${#listeners[*]} > 0 )); then
               echo "${indent}ParseTreeWalker walker = new ParseTreeWalker();" >> $fileName
            fi
            for(( i=0;i<${#treewalking[*]};i++ )); do
               if [[ ${treewalkingtype[i]} == "l" ]]; then
                  # listener
                  echo "${indent}${treewalking[i]} listener$i = new ${treewalking[i]}();" >> $fileName
               else
                  # visitor
                  echo "${indent}${treewalking[i]} visitor$i = new ${treewalking[i]}();" >> $fileName
               fi
            done
         fi
         echo "${indent}while(${interactiveVar} != null) {" >> $fileName
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      fi
      echo "${indent}// create a CharStream that reads from standard input:" >> $fileName
      if (( $version < 7 )); then
         echo -n "${indent}ANTLRInputStream input = new ANTLRInputStream(" >> $fileName
         if [[ $interactive == "true" ]]; then
            echo -n "${interactiveVar} + \"\\n\"" >> $fileName
         else
            echo -n "System.in" >> $fileName
         fi
         echo ");" >> $fileName
      else
         echo -n "${indent}CharStream input = " >> $fileName
         if [[ $interactive == "true" ]]; then
            echo "CharStreams.fromString(${interactiveVar} + \"\\n\");" >> $fileName
         else
            echo "CharStreams.fromStream(System.in);" >> $fileName
         fi
      fi
      echo "${indent}// create a lexer that feeds off of input CharStream:" >> $fileName
      echo "${indent}${grammar}Lexer lexer = new ${grammar}Lexer(input);" >> $fileName
      if [[ $interactive == "true" ]]; then
         echo "${indent}lexer.setLine(num${interactiveNext});" >> $fileName
         echo "${indent}lexer.setCharPositionInLine(0);" >> $fileName
      fi
      echo "${indent}// create a buffer of tokens pulled from the lexer:" >> $fileName
      echo "${indent}CommonTokenStream tokens = new CommonTokenStream(lexer);" >> $fileName
      echo "${indent}// create a parser that feeds off the tokens buffer:" >> $fileName
      if [[ $interactive == "true" ]]; then
         echo "${indent}parser.setInputStream(tokens);" >> $fileName
      else
         echo "${indent}${grammar}Parser parser = new ${grammar}Parser(tokens);" >> $fileName
         echo "${indent}// replace error listener:" >> $fileName
         echo "${indent}//parser.removeErrorListeners(); // remove ConsoleErrorListener" >> $fileName
         echo "${indent}//parser.addErrorListener(new ErrorHandlingListener());" >> $fileName
      fi
      echo "${indent}// begin parsing at $rule rule:" >> $fileName
      echo "${indent}ParseTree tree = parser.$rule();" >> $fileName
      echo "${indent}if (parser.getNumberOfSyntaxErrors() == 0) {" >> $fileName
      echo "${indent}   // print LISP-style tree:" >> $fileName
      echo "${indent}   // System.out.println(tree.toStringTree(parser));" >> $fileName
      if (( ${#treewalking[*]} > 0 )); then
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         if [[ $interactive != "true" ]]; then
            if (( ${#listeners[*]} > 0 )); then
               echo "${indent}ParseTreeWalker walker = new ParseTreeWalker();" >> $fileName
            fi
            for(( i=0;i<${#treewalking[*]};i++ )); do
               if [[ ${treewalkingtype[i]} == "l" ]]; then
                  # listener
                  echo "${indent}${treewalking[i]} listener$i = new ${treewalking[i]}();" >> $fileName
               else
                  # visitor
                  echo "${indent}${treewalking[i]} visitor$i = new ${treewalking[i]}();" >> $fileName
               fi
            done
         fi
         for(( i=0;i<${#treewalking[*]};i++ )); do
            if [[ ${treewalkingtype[i]} == "l" ]]; then
               # listener
               echo "${indent}walker.walk(listener$i, tree);" >> $fileName
            else
               # visitor
               echo "${indent}visitor$i.visit(tree);" >> $fileName
            fi
         done
         indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      fi
      echo "${indent}}" >> $fileName
      if [[ $interactive == "true" ]]; then
         echo "${indent}if (sc.hasNext${interactiveNext}())" >> $fileName
         echo "${indent}   ${interactiveVar} = sc.next${interactiveNext}()${nextExtraText};" >> $fileName
         echo "${indent}else" >> $fileName
         echo "${indent}   ${interactiveVar} = null;" >> $fileName
         echo "${indent}num${interactiveNext}++;" >> $fileName
         indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         echo "${indent}}" >> $fileName
      fi
      indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}}" >> $fileName
      if [[ $interactive == "false" ]]; then
         echo "${indent}catch(IOException e) {" >> $fileName
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         echo "${indent}e.printStackTrace();" >> $fileName
         echo "${indent}System.exit(1);" >> $fileName
         indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         echo "${indent}}" >> $fileName
      fi
      echo "${indent}catch(RecognitionException e) {" >> $fileName
      indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}e.printStackTrace();" >> $fileName
      echo "${indent}System.exit(1);" >> $fileName
      indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}}" >> $fileName
      indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}}" >> $fileName
      echo "}" >> $fileName
      ;;
   cpp)
      makefileName="Makefile"
      if [[ $forceCreation == "false" ]]; then
         if [ -f $makefileName ]; then
            echo "ERROR: file \"$makefileName\" already exists!"
            exit 12
         fi
      elif [ -f $makefileName ]; then
         rm -fv ${makefileName}
      fi

      # creating Makefile:
      
      echo -e ".PHONY: all clean cleanall #install" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "GRAMMAR=${grammarfile}" >> $makefileName
      echo -en "TARGETS_CPP=${grammar}Lexer.cpp ${grammar}Parser.cpp" >> $makefileName
      if (( ${#listeners[*]} > 0 )); then
         echo -en " ${grammar}BaseListener.cpp ${grammar}Listener.cpp" >> $makefileName
         for(( i=0;i<${#listeners[*]};i++ )); do
            add="true"
            for(( j=0;j<i;j++ )); do
               if [[ ${listeners[j]} == ${listeners[i]} ]]; then
                  add="false"
               fi
            done
            if [[ $add == "true" ]]; then
               echo -en " ${listeners[i]}.cpp" >> $makefileName
            fi
         done
      fi
      if (( ${#visitors[*]} > 0 )); then
         echo -en " ${grammar}BaseVisitor.cpp ${grammar}Visitor.cpp" >> $makefileName
         for(( i=0;i<${#visitors[*]};i++ )); do
            add="true"
            for(( j=0;j<i;j++ )); do
               if [[ ${visitors[j]} == ${visitors[i]} ]]; then
                  add="false"
               fi
            done
            if [[ $add == "true" ]]; then
               echo -en " ${visitors[i]}.cpp" >> $makefileName
            fi
         done
      fi
      echo -e "" >> $makefileName
      echo -en "OBJS=\$(TARGETS_CPP:cpp=o) ${grammar}Main.o" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "TARGET=${grammar}Main" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "CFLAGS=-Wall -ggdb -pthread -std=gnu++17 -I/usr/local/include/antlr4-runtime" >> $makefileName
      echo -e "LDFLAGS=-lantlr4-runtime" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "all: \$(TARGET)" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "\$(TARGETS_CPP): \$(GRAMMAR)" >> $makefileName
      if [ -e ${grammar}Parser.g4 ]; then
         echo -e "\tantlr4 -cpp ${grammar}Lexer.g4" >> $makefileName
         echo -e "\tantlr4 -cpp -visitor ${grammar}Parser.g4" >> $makefileName
      else
         echo -e "\tantlr4 -cpp -visitor \$(GRAMMAR)" >> $makefileName
      fi
      echo -e "" >> $makefileName
      echo -e "%.o: %.cpp" >> $makefileName
      echo -e "\tg++ \$(CFLAGS) -c \$<" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "\$(TARGET): \$(GRAMMAR) \$(TARGETS_CPP) \$(OBJS)" >> $makefileName
      echo -e "\tg++ \$(CFLAGS) \$(OBJS) \$(LDFLAGS) -o \$(TARGET)" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "#install: \$(TARGET)" >> $makefileName
      echo -e "#\tcp -a \$(TARGET) ../../bin" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "clean:" >> $makefileName
      echo -e "\trm -fv \$(OBJS) core" >> $makefileName
      echo -e "" >> $makefileName
      echo -e "cleanall: clean" >> $makefileName
      echo -e "\tantlr4-clean -cpp" >> $makefileName
      echo -e "\trm -fv \$(TARGET)" >> $makefileName
      
      
      # creating main:
      
      echo "#include <iostream>" >> $fileName
      echo "#include <antlr4-runtime.h>" >> $fileName
      echo "#include \"${grammar}Lexer.h\"" >> $fileName
      echo "#include \"${grammar}Parser.h\"" >> $fileName
      
      for(( i=0;i<${#treewalking[*]};i++ )); do
         add="true"
         for(( j=0;j<i;j++ )); do
            if [[ ${treewalking[j]} == ${treewalking[i]} ]]; then
               add="false"
            fi
         done
         if [[ $add == "true" ]]; then
            echo "#include \"${treewalking[i]}.h\"" >> $fileName
         fi
      done
      echo "" >> $fileName
      
      echo "using namespace std;" >> $fileName
      echo "using namespace antlr4;" >> $fileName
      echo "using namespace antlr4::tree;" >> $fileName
      echo "" >> $fileName
      
      echo "int main(int argc, const char* argv[]) {" >> $fileName
      indentval=${indentSpaces}; indent=$(printf "%${indentval}s")
      if [[ $lineInteractive == "true" ]]; then
         echo "${indent}std::istream *stream = &cin;" >> $fileName
         #echo "std::ifstream fstream;" >> $fileName
         #echo "fstream.open("filename");" >> $fileName
         #echo "stream = &fstream;" >> $fileName
      
         echo "${indent}string line;" >> $fileName
         echo "${indent}int lineNum = 1;" >> $fileName
         echo "${indent}${grammar}Parser* parser = new ${grammar}Parser(NULL);" >> $fileName
         echo "${indent}// replace error listener:" >> $fileName
         echo "${indent}//parser->removeErrorListeners(); // remove ConsoleErrorListener" >> $fileName
         echo "${indent}//parser->addErrorListener(new ErrorHandlingListener());" >> $fileName
         if (( ${#treewalking[*]} > 0 )); then
            if (( ${#listeners[*]} > 0 )); then
               echo "${indent}ParseTreeWalker* walker = new ParseTreeWalker();" >> $fileName
            fi
            for(( i=0;i<${#treewalking[*]};i++ )); do
               if [[ ${treewalkingtype[i]} == "l" ]]; then
                  # listener
                  echo "${indent}${treewalking[i]}* listener$i = new ${treewalking[i]}();" >> $fileName
               else
                  # visitor
                  echo "${indent}${treewalking[i]}* visitor$i = new ${treewalking[i]}();" >> $fileName
               fi
            done
         fi
         echo "${indent}while(getline(*stream, line)) {" >> $fileName
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      else
         echo "${indent}std::istream *stream;" >> $fileName
      fi
      echo "${indent}// create a ANTLRInputStream that reads from standard input:" >> $fileName
      echo "${indent}ANTLRInputStream* input;" >> $fileName
      if [[ $lineInteractive == "true" ]]; then
         echo "${indent}std::stringstream sstream;" >> $fileName
         echo "${indent}sstream << line << \"\\n\";" >> $fileName
         echo "${indent}std::istream *linestream = &sstream;" >> $fileName
         echo "${indent}input = new ANTLRInputStream(*linestream);" >> $fileName
      else
         echo "${indent}stream = &cin;" >> $fileName
         echo "${indent}input = new ANTLRInputStream(*stream);" >> $fileName
      fi
      echo "${indent}// create a lexer that feeds off of input ANTLRInputStream:" >> $fileName
      echo "${indent}${grammar}Lexer* lexer = new ${grammar}Lexer(input);" >> $fileName
      if [[ $lineInteractive == "true" ]]; then
         echo "${indent}lexer->setLine(lineNum);" >> $fileName
         echo "${indent}lexer->setCharPositionInLine(0);" >> $fileName
      fi
      echo "${indent}// create a buffer of tokens pulled from the lexer:" >> $fileName
      echo "${indent}CommonTokenStream* tokens = new CommonTokenStream(lexer);" >> $fileName
      echo "${indent}// create a parser that feeds off the tokens buffer:" >> $fileName
      if [[ $lineInteractive == "true" ]]; then
         echo "${indent}parser->setInputStream(tokens);" >> $fileName
      else
         echo "${indent}${grammar}Parser* parser = new ${grammar}Parser(tokens);" >> $fileName
         echo "${indent}// replace error listener:" >> $fileName
         echo "${indent}//parser->removeErrorListeners(); // remove ConsoleErrorListener" >> $fileName
         echo "${indent}//parser->addErrorListener(new ErrorHandlingListener());" >> $fileName
      fi
      echo "${indent}// begin parsing at $rule rule:" >> $fileName
      echo "${indent}ParseTree* tree = parser->$rule();" >> $fileName
      echo "${indent}if (parser->getNumberOfSyntaxErrors() == 0) {" >> $fileName
      indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}// print LISP-style tree:" >> $fileName
      echo "${indent}// cout << tree->toStringTree(parser) << endl;" >> $fileName
      if (( ${#treewalking[*]} > 0 )); then
         if [[ $lineInteractive != "true" ]]; then
            if (( ${#listeners[*]} > 0 )); then
               echo "${indent}ParseTreeWalker* walker = new ParseTreeWalker();" >> $fileName
            fi
            for(( i=0;i<${#treewalking[*]};i++ )); do
               if [[ ${treewalkingtype[i]} == "l" ]]; then
                  # listener
                  echo "${indent}${treewalking[i]}* listener$i = new ${treewalking[i]}();" >> $fileName
               else
                  # visitor
                  echo "${indent}${treewalking[i]}* visitor$i = new ${treewalking[i]}();" >> $fileName
               fi
            done
         fi
         for(( i=0;i<${#treewalking[*]};i++ )); do
            if [[ ${treewalkingtype[i]} == "l" ]]; then
               # listener
               echo "${indent}walker->walk(listener$i, tree);" >> $fileName
            else
               # visitor
               echo "${indent}visitor$i->visit(tree);" >> $fileName
            fi
         done
      fi
      indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      echo "${indent}}" >> $fileName
      if [[ $lineInteractive == "true" ]]; then
         echo "${indent}lineNum++;" >> $fileName
         indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         echo "${indent}}" >> $fileName
      fi
      echo "}" >> $fileName
      ;;
   python)
      indentval=${indentSpaces}; indent=$(printf "%${indentval}s")
      echo "import sys" > $fileName
      echo "from antlr4 import *" >> $fileName
      echo "from ${grammar}Lexer import ${grammar}Lexer" >> $fileName
      echo "from ${grammar}Parser import ${grammar}Parser" >> $fileName
      if (( ${#treewalking[*]} > 0 )); then
         for(( i=0;i<${#treewalking[*]};i++ )); do
            echo "from ${treewalking[i]} import ${treewalking[i]}" >> $fileName
         done
      fi
      echo "" >> $fileName
      echo "def main(argv):" >> $fileName
      if (( ${#treewalking[*]} > 0 )); then
         if (( ${#listeners[*]} > 0 )); then
            echo "${indent}walker = ParseTreeWalker()" >> $fileName
         fi
         for(( i=0;i<${#treewalking[*]};i++ )); do
            if [[ ${treewalkingtype[i]} == "l" ]]; then
               # listener
               echo "${indent}listener$i = ${treewalking[i]}()" >> $fileName
            else
               # visitor
               echo "${indent}visitor$i = ${treewalking[i]}()" >> $fileName
            fi
         done
      fi
      if [[ $interactive == "true" ]]; then
         echo "${indent}for line in sys.stdin:" >> $fileName
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         echo "${indent}input_stream = InputStream(line)" >> $fileName
      else
         echo "${indent}input_stream = StdinStream()" >> $fileName
      fi
      echo "${indent}lexer = ${grammar}Lexer(input_stream)" >> $fileName
      echo "${indent}stream = CommonTokenStream(lexer)" >> $fileName
      echo "${indent}parser = ${grammar}Parser(stream)" >> $fileName
      echo "${indent}tree = parser.${rule}()" >> $fileName
      if (( ${#treewalking[*]} > 0 )); then
         echo "${indent}if parser.getNumberOfSyntaxErrors() == 0:" >> $fileName
         indentval=$(echo ${indentval}+${indentSpaces} | bc); indent=$(printf "%${indentval}s")
         for(( i=0;i<${#treewalking[*]};i++ )); do
            if [[ ${treewalkingtype[i]} == "l" ]]; then
               # listener
               echo "${indent}walker.walk(listener$i, tree)" >> $fileName
            else
               # visitor
               echo "${indent}visitor$i.visit(tree)" >> $fileName
            fi
         done
         indentval=$(echo ${indentval}-${indentSpaces} | bc); indent=$(printf "%${indentval}s")
      fi
      echo "" >> $fileName
      echo "if __name__ == '__main__':" >> $fileName
      echo "${indent}main(sys.argv)" >> $fileName
      ;;
   *)
      echo "ERROR: $target main not yet implemented!"
      ;;
esac

exit 0
